# Generated by Django 5.0.7 on 2024-07-23 14:04

import django.db.models.deletion
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GeospatialResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('metadata_file', models.FileField(blank=True, null=True, upload_to='repository', verbose_name='Geospatial metadata XML.')),
                ('geodata_file', models.FileField(blank=True, null=True, upload_to='repository', verbose_name='Geospatial data file.')),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='repository', verbose_name='PDF file for printing.')),
                ('published_on_csw', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='MetadataFormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=100)),
                ('iso_xml_path', models.CharField(blank=True, max_length=200)),
                ('field_type', models.CharField(choices=[('list', 'list'), ('combobox', 'combobox'), ('date', 'date'), ('text', 'text')], max_length=100)),
                ('is_static', models.BooleanField(default=False)),
                ('possible_values', models.TextField()),
                ('default_value', models.CharField(blank=True, max_length=100)),
                ('comments', models.TextField(blank=True)),
                ('old_path', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalGeospatialResource',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('metadata_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('metadata_file', models.TextField(blank=True, max_length=100, null=True, verbose_name='Geospatial metadata XML.')),
                ('geodata_file', models.TextField(blank=True, max_length=100, null=True, verbose_name='Geospatial data file.')),
                ('pdf_file', models.TextField(blank=True, max_length=100, null=True, verbose_name='PDF file for printing.')),
                ('published_on_csw', models.BooleanField(default=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical geospatial resource',
                'verbose_name_plural': 'historical geospatial resources',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('metadata_fields', models.ManyToManyField(to='core.metadataformfield')),
            ],
        ),
    ]
